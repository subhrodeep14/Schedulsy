// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  avatar    String?
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks     Task[]
  notes     Note[]
  settings  UserSettings?
  reminders Reminder[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  estimatedDuration Int? // in minutes
  actualDuration   Int? // in minutes
  tags        String[] // array of tag strings
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[] // array of tag strings
  isPinned  Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  theme                 String  @default("light")
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  defaultTaskDuration   Int     @default(60) // in minutes
  workStartTime        String  @default("09:00")
  workEndTime          String  @default("17:00")
  breakDuration        Int     @default(15) // in minutes
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Reminder {
  id        String   @id @default(cuid())
  title     String
  message   String?
  dueDate   DateTime
  isCompleted Boolean @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
